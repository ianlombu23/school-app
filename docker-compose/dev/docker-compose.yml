services:
  accountdb:
    container_name: accountdb
    ports:
      - 2700:3306
    environment:
      MYSQL_DATABASE: account
    extends:
      file: common-config.yml
      service: microservice-db-config

  attendancedb:
    container_name: attendancedb
    ports:
      - 2600:3306
    environment:
      MYSQL_DATABASE: attendance
    extends:
      file: common-config.yml
      service: microservice-db-config

  configserver:
    image: "ianlombu/config-server:v1"
    container_name: ms-config-server
    ports:
      - 3030:3030
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: "configserver"

  serviceregistry:
    image: ianlombu/service-registry:v1
    container_name: ms-service-registry
    ports:
      - 3000:3000
    environment:
      SPRING_APPLICATION_NAME: service-registry
      OTEL_SERVICE_NAME: "service-registry"
    extends:
      file: common-config.yml
      service: network-deploy-service

  gatewayserver:
    image: "ianlombu/gateway:v1"
    container_name: ms-api-gateway
    ports:
      - 3500:3500
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      OTEL_SERVICE_NAME: "api-gateway"
    extends:
      file: common-config.yml
      service: microservice-eureka

  account:
    image: "ianlombu/account-service:v1"
    container_name: ms-accounts
    ports:
      - 5052:5052
    environment:
      SPRING_APPLICATION_NAME: account
      SPRING_DATASOURCE_URL: jdbc:mysql://accountdb:3306/account
      OTEL_SERVICE_NAME: "account-service"
    depends_on:
      accountdb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  attendance:
    image: "ianlombu/attendance-service:v1"
    container_name: ms-attendance
    ports:
      - 5030:5030
    environment:
      SPRING_APPLICATION_NAME: attendance
      SPRING_DATASOURCE_URL: jdbc:mysql://attendancedb:3306/attendance
      OTEL_SERVICE_NAME: "attendance-service"
    depends_on:
      attendancedb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config


#  OBSERVABILITY
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3300:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3300/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9050:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3200:3200"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    extends:
      file: common-config.yml
      service: network-deploy-service

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
      - MINIO_STORAGE_CLASS_STANDARD_ERC_PARITY=4
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ../observability/loki/loki-config.yml:/etc/loki/config.yml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  iannetwork:
    driver: "bridge"